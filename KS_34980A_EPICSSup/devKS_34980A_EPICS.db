#
# Simple database and stream protocol file for basic SCPI (IEEE488.2) commands
#
#
# Short and long form of identification string
#
record(stringin, "$(P)$(R)IDN") {
  field(DESC, "SCPI identification string")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getIDN(39) $(PORT) $(A)")
  field(PINI, "YES")
}

record(waveform, "$(P)$(R)IDNwf") {
  field(DESC, "SCPI identification string")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getIDN(199) $(PORT) $(A)")
  field(PINI, "YES")
  field(FTVL, "CHAR")
  field(NELM, "200")
}

record(bo, "$(P)$(R)RST") {
  field(DESC, "SCPI Reset")
  field(DTYP, "stream")
  field(OUT, "@devKS_34980A_EPICS.proto cmd(*RST) $(PORT) $(A)")
}

record(bo, "$(P)$(R)CLS") {
  field(DESC, "SCPI Clear status")
  field(DTYP, "stream")
  field(OUT, "@devKS_34980A_EPICS.proto cmd(*CLS) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetSTB") {
  field(DESC, "SCPI get status byte")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getD(*STB) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetESR") {
  field(DESC, "SCPI get event status")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getD(*ESR) $(PORT) $(A)")
}

record(longout, "$(P)$(R)SetESE") {
  field(DESC, "SCPI enable event status")
  field(DTYP, "stream")
  field(OUT, "@devKS_34980A_EPICS.proto setD(*ESE) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetESE") {
  field(DESC, "SCPI enabled event status")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getD(*ESE) $(PORT) $(A)")
}

record(longout, "$(P)$(R)SetSRE") {
  field(DESC, "SCPI enable service requests")
  field(DTYP, "stream")
  field(OUT, "@devKS_34980A_EPICS.proto setD(*SRE) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetSRE") {
  field(DESC, "Enabled service requests")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getD(*SRE) $(PORT) $(A)")
}

record(longin, "$(P)$(R)GetOPC") {
  field(DESC, "Output completion status")
  field(DTYP, "stream")
  field(INP, "@devKS_34980A_EPICS.proto getD(*OPC) $(PORT) $(A)")
}

## EAL Alphatross specific records
# record(ai, "$(P)$(R)NAME")
# {
#     field(DESC, "")
#     field(DTYP, "stream")
#     field(INP,  "@devKS_34980A_EPICS.proto () $(PORT) $(A)")
# }
# the readbacks aren't used in the existing Alphatross code.  
# maybe we don't need these?  Maybe we should use them?  TBD.
# Leaving the INP field incomplete, because I don't know what the configuration
# values should be for the Keysight mainframe
# record(ai, "$(P)$(R)GetExtractorVoltage")
# {
#     field(DESC, "Get Alphatross Extractor Voltage")
#     field(DTYP, "stream")
#     field(INP,  "@devKS_34980A_EPICS.proto () $(PORT) $(A)")
# }


# record(ai, "$(P)$(R)getVacuumLevelRaw") {
#   field(DESC, "Alphatross Vacuum Level Raw Measurement)")
#   field(DTYP, "stream")
#   field(INP, "@devKS_34980A_EPICS.proto getVoltageDC(5012) $(PORT) $(A)")
#   field(PINI, "YES")
#   # field(SCAN, "10 second")
#   field(FLNK, "$(P)$(R)getVacuumLevel")
# }

# record(calc, "$(P)$(R)getVacuumLevel") {
#   field(DESC, "Alphatross Vacuum Level")
#   field(CALC, "10^(a-10)")
#   field(INPA, "$(P)$(R)getVacuumLevelRaw")
#   field(PINI, "YES")
#   field(SCAN, "Passive")
#   field(EGU, "Torr")
# }

record(ai, "$(P)$(R)switcherMagnetVoltage") {
    field(DESC, "Switcher Magnet Voltage")
    field(DTYP, "stream")
    # field(SCAN, "1 second")
    field(SCAN, "Passive")
    field(INP,  "@devKS_34980A_EPICS.proto getVoltageDC(100,0.0001,1001) $(PORT) $(A)")
    field(EGU, "Volts")
    field(PINI, "YES")
}

record(ai, "$(P)$(R)switcherMagnetCurrent") {
    field(DESC, "Switcher Magnet Current")
    field(DTYP, "stream")
    # field(SCAN, "1 second")
    field(SCAN, "Passive")
    field(INP,  "@devKS_34980A_EPICS.proto getVoltageDC(0.1,0.0000001,1002) $(PORT) $(A)")
    field(EGU, "Amps")
    field(ASLO, "10000")
    field(PINI, "YES")
}

# record(calc, "$(P)$(R)switcherMagnetPower") {
#     field(DESC, "Switcher Magnet Power")
#     field(CALC, "a*b")
#     field(INPA, "$(P)$(R)switcherMagnetVoltage")
#     field(INPB, "$(P)$(R)switcherMagnetCurrent")
#     field(EGU, "Watts")
#     field(SCAN, "1 second")
#     field(PREC, "1")      # Seems to have no effect.  Maybe UI hints?
# }

record(ai, "$(P)$(R)readOutput1") {
    field(DESC, "Test Output 1")
    field(DTYP, "stream")
    # field(SCAN, "1 second")
    field(SCAN, "Passive")
    field(INP,  "@devKS_34980A_EPICS.proto getSourceVoltage(2001) $(PORT) $(A)")
    field(PINI, "YES")
}

record(ao, "$(P)$(R)writeOutput1") {
    field(DESC, "Write to Test Output 1")
    field(DTYP, "stream")
    field(PREC, "3")
    field(EGU,  "Volts")
    field(SCAN, "Passive")
    field(OUT, "@devKS_34980A_EPICS.proto setSourceVoltage(3,2001) $(PORT) $(A)" )
    field(PINI, "YES")
    field(VAL, "0")
}

record(bi, "$(P)$(R)stateOutput1") {
    field(DESC, "Output 1 State")
    field(DTYP, "stream")
    # field(VAL,  "value")
    field(ZNAM, "Off")    
    # field(ZSV, "NO_ALARM MINOR MAJOR")
    field(ONAM, "On")     
    # field(OSV, "NO_ALARM MINOR MAJOR")
    # field(SCAN, "1 second")
    field(SCAN, "Passive")
    field(INP,  "@devKS_34980A_EPICS.proto getSourceState(2001) $(PORT) $(A)")
    field(PINI, "YES")
}
